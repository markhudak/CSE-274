import java.util.NoSuchElementException;/** * A class that implements the ADT deque by using a doubly linked chain of * nodes. *  */public class LinkedDeque<T> implements DequeInterface<T> {	private DLNode firstNode;	private DLNode lastNode;	public LinkedDeque() {		firstNode = lastNode = null;	}	public void clear() {		firstNode = lastNode = null;	}	public void addToFront(T newEntry) {		DLNode newNode = new DLNode(newEntry);		newNode.previous = null; 		newNode.next = firstNode;		if (isEmpty())			lastNode = newNode;		else			firstNode.previous = newNode;		firstNode = newNode;	}		public void addToBack(T newEntry) {		// TODO		DLNode newNode = new DLNode(newEntry);		newNode.previous = lastNode;		newNode.next = null;		if ( lastNode == null ) firstNode = newNode;		lastNode = newNode;	}	public T getFront() {		if (isEmpty())			throw new NoSuchElementException();		else			return firstNode.data;	}		public T getBack() {		// TODO		return null;	} 	public T removeFront() {		T front = getFront(); // Might throw EmptyQueueException		firstNode = firstNode.next;		if (firstNode == null)			lastNode = null;		else			firstNode.previous = null;		return front;	}	public T removeBack() {		// TODO		return null;	}	public boolean isEmpty() {		return (firstNode == null) && (lastNode == null);	}	/*	 * A doubly-linked node has references to the next node and the previous node.	 */	private class DLNode {		private T data;		private DLNode next;		private DLNode previous;		private DLNode(T dataPortion) {			data = dataPortion;			next = null;			previous = null;		}	}}